
$env: H5;


@use 'sass:math';

$unit: map-get(
  (
    PC: 1px,
    H5: 0.01rem,
    MP: 1rpx,
  ),
  $env
);

@if ($env == PC) {
  .pointer {
    cursor: pointer;
  }
}

@if ($env == H5) {
  html {
    font-size: calc(100vw / 7.5);
  }
  body {
    font-size: 0.32rem;
    user-select: none;
  }
  .select-auto {
    user-select: auto;
  }
  ::-webkit-scrollbar {
    display: none;
  }
}

@if ($env == MP) {
  page {
    user-select: none;
  }
  .select-auto {
    user-select: auto;
  }
}


.bg-center {
  background-position: center;
  background-repeat: no-repeat;
}


@each $val in (cover, contain) {
  .bg-#{$val} {
    background-size: #{$val};
    background-position: center;
    background-repeat: no-repeat;
  }
}


@each $val in (cover, contain) {
  .object-#{$val} {
    object-fit: #{$val};
    width: 100%;
    height: 100%;
  }
}


@each $hex in ('000', '333', '666', '808080', '999', ccc, eee, f6f6f6, fff) {
  .bg-#{$hex} {
    background-color: #{'#' + $hex};
  }
}


@each $alpha in (1, 2, 3, 4, 5, 6, 7, 8, 9) {
  .bg-a-#{$alpha} {
    background-color: rgba(255, 255, 255, math.div($alpha, 10));
  }
}


.bg-mask {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
}


.border-box {
  box-sizing: border-box;
}


.border-none {
  &,
  &::before,
  &::after {
    border: none !important;
  }
}


.corner {
  &,
  &::before,
  &::after {
    border-radius: 10000px;
  }
}


@each $radius in (4, 8, 12, 16, 20, 24, 28, 32) {
  .corner-#{$radius} {
    &,
    &::before,
    &::after {
      border-radius: #{$radius * $unit};
    }
  }

  @each $position in ('top-left', 'top-right', 'bottom-left', 'bottom-right') {
    .corner-#{$position}-#{$radius} {
      &,
      &::before,
      &::after {
        border-#{$position}-radius: #{$radius * $unit};
      }
    }
  }
}


@each $dir in (top, right, bottom, left) {
  .hairline-#{$dir} {
    position: relative;
    &::after {
      position: absolute;
      box-sizing: border-box;
      content: '';
      pointer-events: none;
      background-color: #eee;
      @if $dir != bottom {
        top: 0;
      }
      @if $dir != top {
        bottom: 0;
      }
      @if $dir != left {
        right: 0;
      }
      @if $dir != right {
        left: 0;
      }
      @if $dir == top or $dir == bottom {
        height: if($unit == 1rpx, 1rpx, 1px);
      }
      @if $dir == left or $dir == right {
        width: if($unit == 1rpx, 1rpx, 1px);
      }
    }
  }
}
@each $ratio in (2, 3) {
  @each $dir in (top, right, bottom, left) {
    @media only screen and (-webkit-min-device-pixel-ratio: #{$ratio}) {
      .hairline-#{$dir} {
        &::after {
          transform: if($dir == top or $dir == bottom, scaleY(#{math.div(1, $ratio)}), scaleX(#{math.div(1, $ratio)}));
        }
      }
    }
  }
}


@each $color in ('000', '333', '666', '808080', '999', 'ccc', 'eee', 'f6f6f6', 'fff') {
  .color-#{$color} {
    color: #{'#' + $color};
  }
}


@each $gray in (33, 50, 67, 100) {
  .gray-#{$gray} {
    filter: #{'grayscale(#{math.div($gray, 100)})'};
  }
}


@each $per in (5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100) {
  .w-#{$per} {
    width: #{$per + '%'};
  }
}

.max-w-100 {
  max-width: 100%;
}

.max-h-100 {
  max-height: 100%;
}

.w-100vw {
  width: 100vw;
}

.h-100vh {
  height: 100vh;
}

.h-50 {
  height: 50%;
}

.h-100 {
  height: 100%;
}

.w-auto {
  width: auto;
}

.h-auto {
  height: auto;
}


.flex {
  display: flex;
}


@each $num in (1, 2, 3, 4, 5, 6, 7, 8) {
  .flex-#{$num} {
    flex: #{$num};
  }
}


.flex-none {
  flex: none;
}


.flex-wrap {
  flex-wrap: wrap;
}


.flex-column {
  flex-direction: column;
}


.flex-center {
  align-items: center;
  justify-content: center;
}


@each $val in (flex-start, flex-end, center, space-between, space-around) {
  .justify-#{if(str-index($val, flex), str-slice($val, 6), if(str-index($val, space), str-slice($val, 7), $val))} {
    justify-content: #{$val};
  }
}


@each $val in (flex-start, flex-end, center, baseline) {
  .align-#{if(str-index($val, flex), str-slice($val, 6), $val)} {
    align-items: #{$val};
  }
}


@each $size in (8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48) {
  .font-#{$size * if($unit == 1px, 1, 2)} {
    font-size: #{$size * if($unit == 1px, 1, 2) * $unit};
  }
}

.font-bold {
  font-weight: bold;
}


.grid {
  display: grid;
}


@each $num in (2, 3, 4, 5, 6, 7, 8) {
  .grid-columns-#{$num} {
    grid-template-columns: repeat(#{$num}, 1fr);
  }
  .grid-rows-#{$num} {
    grid-template-rows: repeat(#{$num}, 1fr);
  }
}


@each $gap in (5, 10, 15, 20, 25, 30, 35, 40, 45, 50) {
  .grid-row-gap-#{$gap} {
    grid-row-gap: #{$gap * $unit};
  }
  .grid-column-gap-#{$gap} {
    grid-column-gap: #{$gap * $unit};
  }
  .grid-gap-#{$gap} {
    grid-gap: #{$gap * $unit};
  }
}


@each $align in (start, end, center) {
  .grid-justify-#{$align} {
    justify-items: #{$align};
  }
  .grid-align-#{$align} {
    align-items: #{$align};
  }
}


@each $val in (start, end, center, space-around, space-between, space-evenly) {
  .grid-justify-content-#{if(str-index($val, space), str-slice($val, 7), $val)} {
    justify-content: #{$val};
  }
  .grid-align-content-#{if(str-index($val, space), str-slice($val, 7), $val)} {
    align-content: #{$val};
  }
}


@each $display in (none, inline, block, inline-block) {
  .#{$display} {
    display: #{$display};
  }
}

.visible {
  visibility: visible;
}

.invisible {
  visibility: hidden;
}

@each $float in (left, right) {
  .float-#{$float} {
    float: #{$float};
  }
}

.clearfix::after {
  content: '';
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}

.overflow-hidden {
  overflow: hidden;
}

// 在移动端，通常凡是可滚动的内容都应使用 iOS 平滑滚动，如果你确定无需考虑 iOS 平滑滚动，则可以不使用本类
.overflow-auto {
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}

// 当触发锚点滚动、JS 控制的滚动时，如果希望滚动是平滑的，可以给 body 或滚动容器设上这个类
.scroll-smooth {
  scroll-behavior: smooth;
}


$properties: (margin, padding);
$positions: ('', '-top', '-bottom', '-left', '-right');
$directionMap: (
  x: (
    left,
    right,
  ),
  y: (
    top,
    bottom,
  ),
);
$nums: (0, 5, 10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100);
@each $property in $properties {
  @each $directionKey, $directionValue in $directionMap {
    @each $num in $nums {
      .#{$property}-#{$directionKey}-#{$num} {
        #{$property}-#{nth($directionValue, 1)}: #{$num * $unit} !important;
        #{$property}-#{nth($directionValue, 2)}: #{$num * $unit} !important;
      }
    }
    .#{$property}-#{$directionKey}-auto {
      #{$property}-#{nth($directionValue, 1)}: auto !important;
      #{$property}-#{nth($directionValue, 2)}: auto !important;
    }
  }
  @each $position in $positions {
    @each $num in $nums {
      .#{$property}#{$position}-#{$num} {
        #{$property}#{$position}: #{$num * $unit} !important;
      }
    }
    .#{$property}#{$position}-auto {
      #{$property}#{$position}: auto !important;
    }
  }
}


$ar: (
  '4-1': 25,
  '20-7': 35,
  '5-2': 40,
  '2-1': 50,
  '16-9': 56.25,
  '16-10': 62.5,
  '4-3': 75,
  '1-1': 100,
);
@each $radio, $per in ($ar) {
  .ar-#{$radio} {
    padding-bottom: #{$per + '%'};
  }
}


@each $index in (0, 1, 2) {
  .z-index-#{$index} {
    z-index: #{$index};
  }
}


@each $val in (relative, absolute, fixed, sticky) {
  .#{$val} {
    position: #{$val};
  }
}

@each $dir in (top, right, bottom, left) {
  .#{$dir}-0 {
    #{$dir}: 0;
  }
}

.position-0 {
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

.x-0 {
  left: 0;
  right: 0;
}

.y-0 {
  top: 0;
  bottom: 0;
}


@each $align in (center, left, right) {
  .text-#{$align} {
    text-align: #{$align};
  }
}


.vam {
  vertical-align: middle;
}


.text-nowrap {
  white-space: nowrap;
}

.text-wrap {
  white-space: normal;
}


.text-justify {
  text-align: justify;
  text-align-last: justify;
  &::after {
    display: inline-block;
    width: 100%;
    height: 0;
    content: '\0020';
    overflow: hidden;
  }
}


.text-indent {
  text-indent: 2em;
}


@each $multiple in (14, 16, 18, 20, 22, 24, 26, 28) {
  .line-height-#{$multiple} {
    line-height: #{math.div($multiple, 10)};
  }
}


.underline {
  text-decoration: underline;
}

.no-underline {
  text-decoration: none;
}

.del {
  text-decoration: line-through;
}


.one-line {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

@each $key, $val in (two: 2, three: 3) {
  .#{$key}-lines {
    display: -webkit-box;
    -webkit-line-clamp: #{$val};
    -webkit-box-orient: vertical;
    text-overflow: ellipsis;
    overflow: hidden;
  }
}


.text-rmb::before {
  content: '¥ ';
  font-size: 80%;
  text-decoration: none;
}
